version: '3.8'

services:
  retriever-ui:
    build:
      context: ..
      dockerfile: ui/Dockerfile
    container_name: legal-retriever-ui
    ports:
      - "80:80"      # Frontend
      - "8080:8080"  # API
    environment:
      # API Configuration
      - API_HOST=0.0.0.0
      - API_PORT=8080
      - ENVIRONMENT=production
      
      # Rate Limiting
      - RATE_LIMIT_PER_MINUTE=10
      - RATE_LIMIT_PER_HOUR=100
      
      # Optional: API Key Authentication
      - REQUIRE_API_KEY=false
      # - API_KEYS=key1:ClientName1,key2:ClientName2
      
      # LangSmith (optional)
      - LANGCHAIN_TRACING_V2=${LANGCHAIN_TRACING_V2:-false}
      - LANGCHAIN_API_KEY=${LANGCHAIN_API_KEY:-}
      - LANGCHAIN_PROJECT=${LANGCHAIN_PROJECT:-legal-retriever-api}
      
      # Database (if using PostgreSQL)
      - POSTGRES_CONNECTION=${POSTGRES_CONNECTION:-}
      - ENABLE_POSTGRES_STORAGE=${ENABLE_POSTGRES_STORAGE:-false}
      
      # LLM Configuration
      - LLM_PROVIDER=${LLM_PROVIDER:-openai}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - OLLAMA_MODEL=${OLLAMA_MODEL:-}
      
    volumes:
      # Mount vector store
      - ../vector_store:/app/vector_store:ro
      
      # Mount logs (optional)
      - ./logs:/app/logs
      
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
      
    restart: unless-stopped
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G

  # Optional: Redis for advanced rate limiting
  redis:
    image: redis:7-alpine
    container_name: legal-retriever-redis
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    restart: unless-stopped
    profiles:
      - with-redis

  # Optional: PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: legal-retriever-db
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-retriever}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-retriever_pass}
      - POSTGRES_DB=${POSTGRES_DB:-legal_docs}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ../database_exports/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
    restart: unless-stopped
    profiles:
      - with-postgres

  # Optional: Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: legal-retriever-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  redis-data:
  postgres-data:
  prometheus-data:

networks:
  default:
    name: legal-retriever-network